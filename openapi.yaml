openapi: 3.0.3
info:
  contact:
    email: hello@eliona.io
    name: Eliona by IoTEC AG
    url: https://eliona.io
  description: " The Ontology REST API for Eliona offers access to the resources and\
    \ data of an Eliona environment. See also [Eliona API](/). "
  license:
    name: MIT License
  title: Ontology REST API for Eliona
  version: 0.0.2
externalDocs:
  description: Find out more about Eliona App SDK
  url: https://github.com/eliona-smart-building-assistant
servers:
- url: "https://{environment}.eliona.io/v1"
  variables:
    environment:
      default: name
      description: Environment name to define the server URL
- url: "https://{environment}.eliona.io/api/ontology/v1"
  variables:
    environment:
      default: name
      description: Environment name to define the server URL
- url: "https://{server}/v1"
  variables:
    server:
      default: somewhere:3000
      description: Server of the API
- url: "http://{server}/v1"
  variables:
    server:
      default: localhost:3000
      description: Server of the API
paths:
  /version:
    get:
      description: Get ontology API version metadata
      operationId: getVersion
      responses:
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/ApiMetadata"
          description: Successfully returned the APIs version.
      summary: Version of the ontology API
      tags:
      - Version
  /version/openapi.json:
    get:
      description: Gets specification for this API version as an openapi.json file.
      operationId: getOpenAPI
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Successfully returned the openapi.json file.
      summary: OpenAPI specification for this API version
      tags:
      - Version
  /points:
    get:
      parameters:
      - description: "If the result set is large, pagination across the results can\
          \ be employed; in that case, this parameter defines the page number (zero-indexed)\
          \ that is requested by the client. The number of items included in each\
          \ page is defined by the 'size' parameter. Default is 0, i.e., the first\
          \ results page is returned."
        in: query
        name: page
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
      - description: The number of items to display on a returned results page (see
          the page parameter).
        in: query
        name: size
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 0
          type: integer
      - description: The field and direction to sort results on.
        example: asc
        in: query
        name: sort
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_points_get_200_response"
          description: An array of 'Point' objects.
      summary: Get 'Point' entities.
      tags:
      - Points
    post:
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
        description: New 'Point' entity that is to be added.
        required: true
      responses:
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
        "201":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
          description: Entity was successfully created (new representation returned).
      summary: Create a new 'Point' object.
      tags:
      - Points
  /points/{id}:
    delete:
      parameters:
      - description: Id of 'Point' to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Point' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          description: '''Point'' entity was successfully deleted.'
      summary: Delete a 'Point' object.
      tags:
      - Points
    get:
      parameters:
      - description: Id of 'Point' to return.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Point' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
          description: A 'Point' object.
      summary: Get a specific 'Point' object.
      tags:
      - Points
    patch:
      parameters:
      - description: Id of 'Point' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_points__id__patch_request"
        description: "A single JSON key-value pair (plus @context), indicating the\
          \ property to update and its new value. Note that the Swagger UI does not\
          \ properly show the size constraint on this parameter; but the underlying\
          \ OpenAPI Specification document does."
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Point' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
          description: Entity was updated successfully (new representation returned).
      summary: Update a single property on a specific 'Point' object.
      tags:
      - Points
    put:
      parameters:
      - description: Id of 'Point' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
        description: Updated data for 'Point' entity.
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Point' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
          description: Entity was updated successfully (new representation returned).
      summary: Update an existing 'Point' entity.
      tags:
      - Points
  /spaces:
    get:
      parameters:
      - description: "If the result set is large, pagination across the results can\
          \ be employed; in that case, this parameter defines the page number (zero-indexed)\
          \ that is requested by the client. The number of items included in each\
          \ page is defined by the 'size' parameter. Default is 0, i.e., the first\
          \ results page is returned."
        in: query
        name: page
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
      - description: The number of items to display on a returned results page (see
          the page parameter).
        in: query
        name: size
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 0
          type: integer
      - description: The field and direction to sort results on.
        example: asc
        in: query
        name: sort
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_spaces_get_200_response"
          description: An array of 'Space' objects.
      summary: Get 'Space' entities.
      tags:
      - Spaces
    post:
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_spaces_post_request"
        description: New 'Space' entity that is to be added.
        required: true
      responses:
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
        "201":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_spaces_post_request"
          description: Entity was successfully created (new representation returned).
      summary: Create a new 'Space' object.
      tags:
      - Spaces
  /spaces/{id}:
    delete:
      parameters:
      - description: Id of 'Space' to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Space' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          description: '''Space'' entity was successfully deleted.'
      summary: Delete a 'Space' object.
      tags:
      - Spaces
    get:
      parameters:
      - description: Id of 'Space' to return.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Space' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_spaces_post_request"
          description: A 'Space' object.
      summary: Get a specific 'Space' object.
      tags:
      - Spaces
    patch:
      parameters:
      - description: Id of 'Space' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_spaces__id__patch_request"
        description: "A single JSON key-value pair (plus @context), indicating the\
          \ property to update and its new value. Note that the Swagger UI does not\
          \ properly show the size constraint on this parameter; but the underlying\
          \ OpenAPI Specification document does."
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Space' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_spaces_post_request"
          description: Entity was updated successfully (new representation returned).
      summary: Update a single property on a specific 'Space' object.
      tags:
      - Spaces
    put:
      parameters:
      - description: Id of 'Space' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_spaces_post_request"
        description: Updated data for 'Space' entity.
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Space' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_spaces_post_request"
          description: Entity was updated successfully (new representation returned).
      summary: Update an existing 'Space' entity.
      tags:
      - Spaces
  /alarms:
    get:
      parameters:
      - description: "If the result set is large, pagination across the results can\
          \ be employed; in that case, this parameter defines the page number (zero-indexed)\
          \ that is requested by the client. The number of items included in each\
          \ page is defined by the 'size' parameter. Default is 0, i.e., the first\
          \ results page is returned."
        in: query
        name: page
        schema:
          default: 0
          format: int32
          minimum: 0
          type: integer
      - description: The number of items to display on a returned results page (see
          the page parameter).
        in: query
        name: size
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 0
          type: integer
      - description: The field and direction to sort results on.
        example: asc
        in: query
        name: sort
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_alarms_get_200_response"
          description: An array of 'Alarm' objects.
      summary: Get 'Alarm' entities.
      tags:
      - Alarms
    post:
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
        description: New 'Alarm' entity that is to be added.
        required: true
      responses:
        "500":
          description: Internal Server Error
        "400":
          description: Bad Request
        "201":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
          description: Entity was successfully created (new representation returned).
      summary: Create a new 'Alarm' object.
      tags:
      - Alarms
  /alarms/{id}:
    delete:
      parameters:
      - description: Id of 'Alarm' to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Alarm' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          description: '''Alarm'' entity was successfully deleted.'
      summary: Delete a 'Alarm' object.
      tags:
      - Alarms
    get:
      parameters:
      - description: Id of 'Alarm' to return.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: An object of type 'Alarm' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
          description: A 'Alarm' object.
      summary: Get a specific 'Alarm' object.
      tags:
      - Alarms
    patch:
      parameters:
      - description: Id of 'Alarm' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_alarms__id__patch_request"
        description: "A single JSON key-value pair (plus @context), indicating the\
          \ property to update and its new value. Note that the Swagger UI does not\
          \ properly show the size constraint on this parameter; but the underlying\
          \ OpenAPI Specification document does."
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Alarm' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
          description: Entity was updated successfully (new representation returned).
      summary: Update a single property on a specific 'Alarm' object.
      tags:
      - Alarms
    put:
      parameters:
      - description: Id of 'Alarm' to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
        description: Updated data for 'Alarm' entity.
        required: true
      responses:
        "400":
          description: Bad Request
        "404":
          description: An object of type 'Alarm' with the specified ID was not found.
        "500":
          description: Internal Server Error
        "200":
          content:
            application/ld+json:
              schema:
                $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
          description: Entity was updated successfully (new representation returned).
      summary: Update an existing 'Alarm' entity.
      tags:
      - Alarms
components:
  parameters:
    pageParam:
      description: "If the result set is large, pagination across the results can\
        \ be employed; in that case, this parameter defines the page number (zero-indexed)\
        \ that is requested by the client. The number of items included in each page\
        \ is defined by the 'size' parameter. Default is 0, i.e., the first results\
        \ page is returned."
      in: query
      name: page
      schema:
        default: 0
        format: int32
        minimum: 0
        type: integer
    sizeParam:
      description: The number of items to display on a returned results page (see
        the page parameter).
      in: query
      name: size
      schema:
        default: 20
        format: int32
        maximum: 100
        minimum: 0
        type: integer
    sortParam:
      description: The field and direction to sort results on.
      example: asc
      in: query
      name: sort
      schema:
        enum:
        - asc
        - desc
        type: string
  schemas:
    ApiMetadata:
      properties:
        '@context':
          default: https://api.eliona.io/contexts/ApiMetadata.jsonld
          type: string
        '@type':
          default: https://api.eliona.io/schema#APIMetadata
          type: string
        version:
          example: 1.0.0
          type: string
        commit:
          example: 3ddb18cd70c796b20472d4df70c125fa174d8aa5
          type: string
        timestamp:
          example: 2025-06-25T16:03:33+02:00
          type: string
      type: object
    HydraCollection:
      properties:
        '@context':
          $ref: "#/components/schemas/Context"
        '@type':
          default: hydra:Collection
          type: string
        hydra:totalItems:
          type: integer
        hydra:view:
          $ref: "#/components/schemas/HydraPartialCollectionView"
      required:
      - '@context'
      - '@type'
      - hydra:member
      type: object
    Context:
      properties:
        '@base':
          format: uri
          type: string
        hydra:
          default: http://www.w3.org/ns/hydra/core#
          format: uri
          type: string
      required:
      - '@base'
      - '@vocab'
      - hydra
      type: object
    Point:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:brickschema:schema:Brick:Point;1
          type: string
        '@context':
          default: https://dev.realestatecore.io/contexts/Point.jsonld
          type: string
        isPointOf:
          items:
            $ref: "#/components/schemas/Point_isPointOf_inner"
          type: array
        lastKnownValue:
          $ref: "#/components/schemas/Value"
        aggregate:
          type: string
        customProperties:
          type: string
        customTags:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        identifiers:
          type: string
        name:
          type: string
      type: object
    Space:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:Space;1
          type: string
        '@context':
          default: https://dev.realestatecore.io/contexts/Space.jsonld
          type: string
        geometry:
          $ref: "#/components/schemas/Space_geometry"
        georeference:
          $ref: "#/components/schemas/Space_georeference"
        hasPart:
          items:
            $ref: "#/components/schemas/Space_hasPart_inner"
          type: array
        isLocationOf:
          items:
            $ref: "#/components/schemas/Point_isPointOf_inner"
          type: array
        isPartOf:
          $ref: "#/components/schemas/Space_isPartOf"
        hasPoint:
          items:
            $ref: "#/components/schemas/Space_hasPoint_inner"
          type: array
        customProperties:
          type: string
        customTags:
          type: string
        identifiers:
          type: string
        name:
          type: string
      type: object
    Alarm:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:brickschema:schema:Brick:Alarm;1
          type: string
        '@context':
          default: https://dev.realestatecore.io/contexts/Alarm.jsonld
          type: string
        isPointOf:
          items:
            $ref: "#/components/schemas/Point_isPointOf_inner"
          type: array
        lastKnownValue:
          $ref: "#/components/schemas/ExceptionEvent"
        aggregate:
          type: string
        customProperties:
          type: string
        customTags:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        identifiers:
          type: string
        name:
          type: string
      type: object
    Value:
      properties:
        value:
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    ExceptionEvent:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:ExceptionEvent;1
          type: string
        '@context':
          default: https://dev.realestatecore.io/contexts/ExceptionEvent.jsonld
          type: string
        sourcePoint:
          $ref: "#/components/schemas/Space_hasPoint_inner"
        value:
          type: string
        customProperties:
          type: string
        customTags:
          type: string
        end:
          format: date-time
          type: string
        identifiers:
          type: string
        name:
          type: string
        start:
          format: date-time
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    _points_get_200_response_allOf_hydra_member_inner:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Point"
    _points_get_200_response:
      allOf:
      - $ref: "#/components/schemas/HydraCollection"
      - properties:
          hydra:member:
            items:
              $ref: "#/components/schemas/_points_get_200_response_allOf_hydra_member_inner"
            type: array
        type: object
    _points__id__patch_request:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Point"
      - maxProperties: 2
        minProperties: 2
        type: object
    _spaces_get_200_response:
      allOf:
      - $ref: "#/components/schemas/HydraCollection"
      - properties:
          hydra:member:
            items:
              $ref: "#/components/schemas/Space"
            type: array
        type: object
    _spaces_post_request:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Space"
    _spaces__id__patch_request:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Space"
      - maxProperties: 2
        minProperties: 2
        type: object
    _alarms_get_200_response_allOf_hydra_member_inner:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Alarm"
    _alarms_get_200_response:
      allOf:
      - $ref: "#/components/schemas/HydraCollection"
      - properties:
          hydra:member:
            items:
              $ref: "#/components/schemas/_alarms_get_200_response_allOf_hydra_member_inner"
            type: array
        type: object
    _alarms__id__patch_request:
      allOf:
      - properties:
          '@context':
            $ref: "#/components/schemas/Context"
        required:
        - '@context'
        type: object
      - $ref: "#/components/schemas/Alarm"
      - maxProperties: 2
        minProperties: 2
        type: object
    HydraPartialCollectionView:
      properties:
        '@id':
          format: uri
          type: string
        '@type':
          default: hydra:PartialCollectionView
          type: string
        hydra:first:
          type: string
        hydra:previous:
          type: string
        hydra:next:
          type: string
        hydra:last:
          type: string
      title: HydraPartialCollectionView
      type: object
    Point_isPointOf_inner:
      properties:
        '@id':
          type: string
        '@type':
          type: string
      required:
      - '@id'
      type: object
    Space_geometry:
      nullable: true
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:Geometry;1
          type: string
      required:
      - '@id'
      type: object
    Space_georeference:
      nullable: true
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:Georeference;1
          type: string
      required:
      - '@id'
      type: object
    Space_hasPart_inner:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:Space;1
          type: string
      required:
      - '@id'
      type: object
    Space_isPartOf:
      nullable: true
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:w3id:rec:Space;1
          type: string
      required:
      - '@id'
      type: object
    Space_hasPoint_inner:
      properties:
        '@id':
          type: string
        '@type':
          default: dtmi:org:brickschema:schema:Brick:Point;1
          type: string
      required:
      - '@id'
      type: object
